class Solution {


    int f(String s1, int i , String s2, int j, int dp[][]){
        if(i<0){
            return 1+j;
        }
        if(j<0){
            return i+1;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(s1.charAt(i) == s2.charAt(j)){
            return f(s1,i-1,s2,j-1, dp);
        }
        return dp[i][j] = 1+Math.min(f(s1,i-1, s2, j, dp), Math.min(f(s1, i, s2, j-1, dp), f(s1,i-1,s2,j-1, dp)));


    }



    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        int dp[][] = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j] = -1;
            }
        }
        return f(word1, m-1, word2, n-1, dp);
    }
}
