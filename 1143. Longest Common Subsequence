class Solution {

    int f(String t1, int i1, String t2, int i2, int dp[][]){

        if(i1 < 0|| i2 < 0 ){
            return 0;
        }

        if(dp[i1][i2] != -1){
            return dp[i1][i2];
        }

        if(t1.charAt(i1) == t2.charAt(i2)){
            return dp[i1][i2] = 1 + f(t1,i1-1, t2, i2-1, dp);
        }
        else{
            return dp[i1][i2] = Math.max(f(t1, i1-1, t2,i2, dp), f(t1,i1,t2,i2-1, dp));
        }
    }


    public int longestCommonSubsequence(String text1, String text2) {
        int ind1 = text1.length();
        int ind2 = text2.length();
        int dp[][] = new int [ind1][ind2];
        for(int i=0;i<ind1;i++){
            for(int j=0;j<ind2;j++){
                dp[i][j] = -1;
            }
        }
        return f(text1, ind1-1, text2, ind2-1, dp);
    }
}
