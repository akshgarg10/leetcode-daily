class Solution {

    // TABULATION
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp [][] = new int[n+1][n+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=n;j++){
                dp[i][j] = 0;
            }
        }
        for(int ind = n-1; ind>=0;ind--){
            for(int prevIndex = ind-1; prevIndex>=-1; prevIndex--){
                int len = 0 + dp[ind+1][prevIndex+1];
                if(prevIndex == -1 || nums[ind] > nums[prevIndex]){
                    len = Math.max(len, 1 + dp[ind+1][ind+1]);
                }
                dp[ind][prevIndex+1] = len;
            }
        }


        return dp[0][-1+1];
    }
}



//MEMOIZATION

/*

    int f(int ind,int prevIndex, int nums[], int n, int dp[][]){
        if(ind == n ){
            return 0;
        }
        if(dp[ind][prevIndex+1] != -1){
            return dp[ind][prevIndex+1];
        }

        int len = 0 + f(ind+1, prevIndex, nums, n, dp);
        if(prevIndex == -1 || nums[ind] > nums[prevIndex]){
            len = Math.max(len, 1 + f(ind+1, ind, nums, n, dp));
        }
        return dp[ind][prevIndex+1] = len;

    }



    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp [][] = new int[n][n+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=n;j++){
                dp[i][j] = -1;
            }
        }
        return f(0, -1, nums, n, dp);
    }
}
*/
