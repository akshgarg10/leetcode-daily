class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        int n = candidates.length;
        generateSumSubsets(candidates, n, target,0, result,new ArrayList<>());
        return result;
    }




    public static void generateSumSubsets(int candidates[], int n, int target,int ind, List<List<Integer>> result, List<Integer> current){
        
        if(target == 0 ) {
            result.add(new ArrayList<>(current));
            return;
        }
        if(target<0 || ind == n){
            return;
        }

        current.add(candidates[ind]);
        generateSumSubsets(candidates, n, target - candidates[ind],ind, result,current);
        current.remove(current.size() - 1);
        generateSumSubsets(candidates, n, target,ind + 1, result,current);





    }

}
