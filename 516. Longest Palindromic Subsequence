 class Solution {


    int f(String t1, int i1,String t2, int i2, int dp[][]){
        
        if(i1 < 0|| i2 < 0 ){
            return 0;
        }

        if(dp[i1][i2] != -1){
            return dp[i1][i2];
        }

        if(t1.charAt(i1) == t2.charAt(i2)){
            return dp[i1][i2] = 1 + f(t1,i1-1, t2, i2-1, dp);
        }
        else{
            return dp[i1][i2] = Math.max(f(t1, i1-1, t2,i2, dp), f(t1,i1,t2,i2-1, dp));
        }
    }


    public int longestPalindromeSubseq(String s) {
        StringBuilder sb = new StringBuilder(s);
        String t = sb.reverse().toString();
        int n = s.length();
        int m = t.length();
        int dp[][] = new int [n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dp[i][j] = -1;
            }
        }
        return f(s,n-1,t,m-1,dp);
    }
}
