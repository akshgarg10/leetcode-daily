class Solution {int f(int ind, int buy, int[] prices, int n, int dp[][][], int k){
        if(ind==n || k==0){
            return 0;
        }
        int profit =0;
        if(dp[ind][buy][k] != -1){
            return dp[ind][buy][k];
        }
        if(buy==1){
            profit = Math.max(-prices[ind] + f(ind+1, 0, prices, n, dp, k), 0+f(ind+1, 1, prices, n, dp,k));
            }
        else{
            profit = Math.max(prices[ind] + f(ind+1, 1, prices, n, dp,k-1), 0 + f(ind+1, 0, prices, n, dp,k));
        }
        
        return dp[ind][buy][k] = profit;
    }


    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int dp [][][] = new int[n][2][k+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<2;j++){
                for(int x=0;x<=k;x++){
                dp[i][j][x] = -1;
            }
               
            }
        }
        
    
    }
}
