class Solution {


    int f(int coins[],int n, int amount, int dp[][]){
        if(n==0){
            if(amount%coins[0]==0){
                return amount/coins[0];
            }
            else{
                return (int)Math.pow(10,9) + 7;
            }
        }
        if(dp[n][amount] !=-1){
            return dp[n][amount];
        }
        int notTake = 0+f(coins,n-1,amount,dp);
        int take = Integer.MAX_VALUE;
        if(coins[n] <= amount){
            take = 1 + f(coins, n , amount - coins[n], dp);
        }
        

        return dp[n][amount] = Math.min(take, notTake);
    }


    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int dp[][] = new int[n][amount+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=amount;j++){
                dp[i][j]=-1;
            }
        }
        int ans = f(coins, n-1, amount, dp);
        if(ans >=Math.pow(10,9) + 7){
            return -1;
        }
        return ans;
    }
}
