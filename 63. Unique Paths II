class Solution {
// TABULATION

    /*
    public int uniquePathsWithObstacles(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;
        int[][] memo = new int[m][n];

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j] == 1){
                    memo[i][j] =0;
                }
                else if(i==0 && j==0){
                    memo[i][j] = 1;
                }
                else{
                    int up =0, left=0;
                    if(i>0) up = memo[i-1][j];
                    if(j>0) left = memo[i][j-1];
                    memo[i][j] = (up+left) ;
                }
            }
        }
        return memo[m-1][n-1];
    }
}
*/


    



//MEMOIZATION

    public int f(int i, int j, int[][] mat, int memo [][]){
        if(i>=0 && j>=0 && mat[i][j] == 1 ){
            return 0;
        }
        if(i==0&& j==0){
            return 1;
        }
        if(i<0 || j<0){
            return 0;
        }
        if(memo[i][j] != -1){
            return memo[i][j];
        }
        

        int left = f(i,j-1,mat,memo);
        int right = f(i-1,j,mat,memo);
        return memo[i][j] = (left+right);
    }


    public int uniquePathsWithObstacles(int[][] obstacleGrid) {

        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int memo[][] = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                memo[i][j] = -1;
            }
        }
        return f(m-1, n-1, obstacleGrid,memo);
        
    }
}




// NAIVE SOLUTION
/*

    public int f(int i, int j, int[][] mat){
        if(i>=0 && j>=0 && mat[i][j] == 1 ){
            return 0;
        }
        if(i==0&& j==0){
            return 1;
        }
        if(i<0 || j<0){
            return 0;
        }

        int left = f(i,j-1,mat);
        int right = f(i-1,j,mat);
        return left+right;
    }


    public int uniquePathsWithObstacles(int[][] obstacleGrid) {

        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;

        return f(m-1, n-1, obstacleGrid);
        
    }
}

*/
